{
    "result": [
        {
            "filepath": "CWE665_Improper_Initialization__char_cat_61b.c",
            "code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE665_Improper_Initialization__char_cat_61b.c\nLabel Definition File: CWE665_Improper_Initialization.label.xml\nTemplate File: sources-sink-61b.tmpl.c\n*/\n/*\n * @description\n * CWE: 665 Improper Initialization\n * BadSource:  Do not initialize data properly\n * GoodSource: Initialize data\n * Sinks: cat\n *    BadSink : Copy string to data using strcat\n * Flow Variant: 61 Data flow: data returned from one function to another in different source files\n *\n * */\n\n#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n#ifndef OMITBAD\n\nchar * CWE665_Improper_Initialization__char_cat_61b_badSource(char * data)\n{\n    /* FLAW: Do not initialize data */\n    ; /* empty statement needed for some flow variants */\n    return data;\n}\n\n#endif /* OMITBAD */\n\n#ifndef OMITGOOD\n\n/* goodG2B() uses the GoodSource with the BadSink */\nchar * CWE665_Improper_Initialization__char_cat_61b_goodG2BSource(char * data)\n{\n    /* FIX: Properly initialize data */\n    data[0] = '\\0'; /* null terminate */\n    return data;\n}\n\n#endif /* OMITGOOD */\n",
            "vuln": [25]
        },
        {
            "filepath": "CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_81_bad.cpp",
            "code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_81_bad.cpp\nLabel Definition File: CWE122_Heap_Based_Buffer_Overflow__c_CWE193.label.xml\nTemplate File: sources-sink-81_bad.tmpl.cpp\n*/\n/*\n * @description\n * CWE: 122 Heap Based Buffer Overflow\n * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator\n * GoodSource: Allocate enough memory for a string and the NULL terminator\n * Sinks: cpy\n *    BadSink : Copy string to data using wcscpy()\n * Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference\n *\n * */\n#ifndef OMITBAD\n\n#include \"std_testcase.h\"\n#include \"CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_81.h\"\n\nnamespace CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_81\n{\n\nvoid CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_81_bad::action(wchar_t * data) const\n{\n    {\n        wchar_t source[10+1] = SRC_STRING;\n        /* POTENTIAL FLAW: data may not have enough space to hold source */\n        wcscpy(data, source);\n        printWLine(data);\n        free(data);\n    }\n}\n\n}\n#endif /* OMITBAD */\n",
            "vuln": [29]
        },
        {
            "filepath": "CWE127_Buffer_Underread__char_declare_memcpy_81_bad.cpp",
            "code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE127_Buffer_Underread__char_declare_memcpy_81_bad.cpp\nLabel Definition File: CWE127_Buffer_Underread.stack.label.xml\nTemplate File: sources-sink-81_bad.tmpl.cpp\n*/\n/*\n * @description\n * CWE: 127 Buffer Under-read\n * BadSource:  Set data pointer to before the allocated memory buffer\n * GoodSource: Set data pointer to the allocated memory buffer\n * Sinks: memcpy\n *    BadSink : Copy data to string using memcpy\n * Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference\n *\n * */\n#ifndef OMITBAD\n\n#include \"std_testcase.h\"\n#include \"CWE127_Buffer_Underread__char_declare_memcpy_81.h\"\n\nnamespace CWE127_Buffer_Underread__char_declare_memcpy_81\n{\n\nvoid CWE127_Buffer_Underread__char_declare_memcpy_81_bad::action(char * data) const\n{\n    {\n        char dest[100];\n        memset(dest, 'C', 100-1); /* fill with 'C's */\n        dest[100-1] = '\\0'; /* null terminate */\n        /* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */\n        memcpy(dest, data, 100*sizeof(char));\n        /* Ensure null termination */\n        dest[100-1] = '\\0';\n        printLine(dest);\n    }\n}\n\n}\n#endif /* OMITBAD */\n",
            "vuln": [31]
        }
    ]
}
